local assert = require("luassert")
local mock = require("luassert.mock")

local codecompanion = require("codecompanion")

local Chat
local adapter = {
  name = "TestAdapter",
  url = "https://api.openai.com/v1/chat/completions",
  roles = {
    llm = "assistant",
    user = "user",
  },
  headers = {
    content_type = "application/json",
  },
  parameters = {
    stream = true,
  },
  handlers = {
    form_parameters = function()
      return {}
    end,
    form_messages = function()
      return {}
    end,
    is_complete = function()
      return false
    end,
  },
  schema = {},
}

describe("Chat", function()
  before_each(function()
    package.loaded["codecompanion.tools.code_runner"] = {
      schema = {},
      system_prompt = function(schema)
        return "baz"
      end,
    }
    package.loaded["codecompanion.helpers.variables"] = {
      buffer = function(chat, params)
        return "foobar"
      end,
    }

    codecompanion.setup({
      strategies = {
        chat = {
          roles = {
            llm = "assistant",
            user = "foo",
          },
        },

        agent = {
          adapter = "openai",
          tools = {
            ["code_runner"] = {
              callback = "tools.code_runner",
              description = "Agent to run code generated by the LLM",
            },
            opts = {
              system_prompt = "bar",
            },
          },
        },
      },
      opts = {
        system_prompt = "foo",
      },
    })

    Chat = require("codecompanion.strategies.chat").new({
      context = { bufnr = 1, filetype = "lua" },
      adapter = require("codecompanion.adapters").extend(adapter),
    })
  end)

  describe("messages", function()
    it("system prompt is added first", function()
      assert.are.same("system", Chat.messages[1].role)
      assert.are.same("foo", Chat.messages[1].content)
    end)

    it("buffer variables are handled", function()
      table.insert(Chat.messages, { role = "user", content = "#buffer what does this file do?" })
      Chat:parse_msg_for_vars(Chat.messages[#Chat.messages])

      -- Variable is inserted as its own new message at the end
      local message = Chat.messages[#Chat.messages]
      assert.are.same("foobar", message.content)
      assert.are.same(false, message.opts.visible)
      assert.are.same("variable", message.opts.tag)
    end)
  end)
end)
